##Â Feature branches
branch_off () {
    CURRENT=$(git symbolic-ref --short HEAD)

    if [ -z "$1" ]; then
        echo "Please provide a branch off name."
    else
        NEW_BRANCH="${CURRENT}__${1}"
        git checkout -b "$NEW_BRANCH"
    fi
}

back_to_feature () {
    CURRENT_SUB_FEATURE=$(git symbolic-ref --short HEAD)
    CURRENT_FEATURE=$( echo $CURRENT_SUB_FEATURE | awk '{split($0,a,"__"); print a[1]}' )
    DELETE=false
    TO_STAGING=false

    for arg in "$@"
    do
        if [ $arg = "-s" ]; then
            TO_STAGING=true
        fi

        if [ $arg = "-d" ]; then
            DELETE=true
        fi
    done

    if [ $TO_STAGING = true ]; then
        echo "Checking out to $MAIN_BRANCH_NAME"
        git checkout $MAIN_BRANCH_NAME
    else
        git checkout $CURRENT_FEATURE
    fi

    if [ $DELETE = true ]; then
        echo "Deleting $CURRENT_SUB_FEATURE"
        git branch -D $CURRENT_SUB_FEATURE
    fi
}

feature_rebase() {
    CURRENT_SUB_FEATURE=$(git symbolic-ref --short HEAD)
    CURRENT_FEATURE=$( echo $CURRENT_SUB_FEATURE | awk '{split($0,a,"__"); print a[1]}' )

    git checkout "$CURRENT_FEATURE" && git pull
    git checkout "$CURRENT_SUB_FEATURE"
    git rebase -i "$CURRENT_FEATURE"
}

# Utils
freshen_branch() {
    CURRENT=$(git symbolic-ref --short HEAD)
	git checkout  && git pull && git fetch --all

    if [ -z "$1" ]; then
        git checkout "$CURRENT"
    else
        git checkout "$1"
    fi

	git rebase -i $MAIN_BRANCH_NAME
}

# Shortcuts
ch_upstream() {
	git checkout origin/"$1"
	git checkout -b "$1"
	git branch --set-upstream-to=origin/"$1" "$1"
}

set_upstream() {
	git branch --set-upstream-to=origin/"$1" "$1"
}

rmb() {
    CURRENT=$(git symbolic-ref --short HEAD)
    if [ -z "$1" ]; then
        echo "Removing branch " "$CURRENT"
    else
        CURRENT="$1"
    fi
    echo "Removing branch " "$CURRENT"

	git checkout $MAIN_BRANCH_NAME && git pull && git fetch --all
	git branch -D "$CURRENT"
}

wip_commit() {
	git add .
	git commit -n -m 'WIP: "$1"'
}

fx() {
   if [ -z "$1" ]; then
       if [ -z "$2" ]; then
           git commit --amend --no-edit
       else
           git commit --amend -m "$2"
       fi
   else
       if [ -z "$2" ]; then
           git commit --fixup "$1" --no-edit
       else
           git commit --fixup "$1" -m "$1"
       fi
   fi
}

plog () {
    FORMAT="--pretty=format:\"%C(red)%h %C(green)%x09%an%x09 %C(cyan)%m %C(bold blue)%ad %C(yellow)%s\""
    eval "git log ${FORMAT} ${@}"
}

change_wt() {
    if [ -z "$1" ]; then
        echo "No branch provided"
        return
    fi

    TO_CHECKOUT="$1"
    EXISTS=$(git show-ref refs/heads/"$TO_CHECKOUT")

    if ! [ -z "$EXISTS" ]; then
        cd "~/Workspace/web2/$TO_CHECKOUT"
        deactivate
        source .venv/bin/activate
    else
        if [ $(git show-ref refs/heads/"$TO_CHECKOUT") ]; then
            echo "Branch $TO_CHECKOUT needs to be checked out"
        else
            echo "Branch $TO_CHECKOUT doesn't exist."
        fi
    fi
}

new_wt() {
    git fetch --all
    if [ -z "$1" ]; then
        echo "No branch provided"
        return
    fi

    cd ~/Workspace/web2
    TO_CHECKOUT="$1"
    BRANCH_NAME=""

    EXISTS=$(git show-ref refs/heads/"$TO_CHECKOUT")
    DIR_NAME="$(echo "$TO_CHECKOUT" | tr "/" "__")"
    CHECKED_OUT=$(git worktree list | grep "$TO_CHECKOUT")

    if [ -z $CHECKED_OUT ]; then
        if ! [ -z "$EXISTS" ]; then
            echo "Is upstream branch - checking out $TO_CHECKOUT in $DIR_NAME"

            git worktree add "$DIR_NAME" "$TO_CHECKOUT"
            cd "$DIR_NAME"
        else
            if ! [ -z "$DIR_NAME" ]; then
                BRANCH_NAME="$1"
                TO_CHECKOUT="$( cut -d '/' -f 2 <<< "$TO_CHECKOUT" )"

                echo "$DIR_NAME" "$BRANCH_NAME" "$TO_CHECKOUT"
            else
                BRANCH_NAME="atoda/$TO_CHECKOUT"
            fi
            echo "Checking out new branch $BRANCH_NAME in $TO_CHECKOUT"

            git worktree add "$TO_CHECKOUT" -b "$BRANCH_NAME"
            cd "$TO_CHECKOUT"
        fi

        python3 -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip
        pip install poetry
        poetry install
        pip install pyobjc-core==7.3 pyobjc-framework-Cocoa==7.3 pyobjc-framework-Quartz==7.3 ipdb colored-traceback
        pip install SnakeViz django-cprofile-middleware
        pip install pip install django-stubs
        pre-commit install

        cp ~/Workspace/web2/common/ngrok ./ngrok
        cp ~/Workspace/web2/common/settings_local.py python/wolfproject/settings_local.py

        npm i
        export PATH=$(npm bin):$PATH
        git checkout -- package-lock.json

        terminal-notifier -title "Build for $BRANCH_NAME finished." -message "Ready to run server"

        # TODO - add flag to run server
        # if [ -z "$2" ]; then
        #     python manage.py runserver
        # else
        #     python manage.py runserver "800$2"
        # fi
    else
        if [ -z $(ls | grep "$DIR_NAME") ]; then
            DIR_NAME="$(echo "$DIR_NAME" | sed "s/atoda_//")"
        fi
        cd $DIR_NAME

        source .venv/bin/activate
    fi

}

remove_wt() {
    if [ -z "$1" ]; then
        WORKTREE_NAME=$(basename $(pwd))
    else
        WORKTREE_NAME="$1"
    fi

    echo "Removing worktree " "$WORKTREE_NAME"

    cd ~/Workspace/web2
    deactivate
    git worktree remove "$WORKTREE_NAME" --force

    if [ -z $(git branch | grep $WORKTREE_NAME ) ]; then
        echo "May need cleanup, check git branch $WORKTREE_NAME"
    fi
}

set_and_pull_upstream() {
    BRANCH_NAME=$(git symbolic-ref --short HEAD)
    if [ -z "$1" ]; then
        ORIGIN="origin"
    else
        ORIGIN="$1"
    fi

    git branch --set-upstream-to="$ORIGIN/$BRANCH_NAME" "$BRANCH_NAME"
    git pull --rebase
}

# Aliases
alias g='git'
alias b='git branch'
alias sta='git stash'
alias ch='git checkout'
alias chb='git checkout origin/'
alias cht='git checkout --track origin/'
alias chu='git checkout staging && git pull && git fetch --all  && git checkout -b'
alias cm="git commit"
alias fp='git push -f'
alias s='git status'
alias D='git branch -D'
alias log='git log --oneline'
alias rb='git rebase -i'
alias rbs='git pull --rebase origin staging'
alias rbc='git rebase --continue'
alias update='git checkout staging && git pull && git fetch --all'
alias ap='git add -p'
alias unstage='git reset HEAD .'
alias uncommit='git reset --soft HEAD~'
alias undo_wip='git reset --soft HEAD~1 && git reset HEAD .'
alias fetch_origin="git fetch origin '*:*'"

# Tmux worktrees
alias nwt="~/.config/tmux/new_wt.sh"
alias rwt="remove_wt"
alias cwt="change_wt"
